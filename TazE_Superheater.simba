{$DEFINE SCRIPT_REVISION := '3.0'}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin // Set default account
  Login.PlayerIndex := 0;
end;

// Bar types supported by the script
const
  BAR_TYPE: TStringArray =
    ['Bronze', 'Iron', 'Silver', 'Steel', 'Gold', 'Mithril', 'Adamantite', 'Runite'];

//=============DEFAULT SETTINGS==============
var
  CurrentTask: string                   = 'Iron'; // Select bar
  USE_COALBAG: Boolean                  = False;  // Steel,Mithril,Adamantite,Runite
  USE_GUI: Boolean                      = True;   // Should use Wasp GUI
  MOUSEOVERRIDE: Int32                  = 15;     // Set movement

const
  // Timing Constants (milliseconds)
  MAGIC_OPEN_WAIT_MIN = 800;
  MAGIC_OPEN_WAIT_MAX = 5000;
  DEPOSIT_WAIT_MIN = 500;
  DEPOSIT_WAIT_MAX = 2000;
  CAST_XP_WAIT = 2000;

type
  EState = (
  LEVEL_UP,
  CLOSE_CONTEXT,
  OPEN_BANK,
  WITHDRAW_MATERIAL,
  DEPOSIT_PRODUCT,
  OPEN_COLLECT,
  HANDLE_COLLECT,
  CLOSE_INTERFACE,
  CAST_SPELL,
  END_SCRIPT);

  TSuperHeater = record(TBaseBankScript)
    State: EState;
    Spell: ERSSpell;
    NatureRune, PrimaryOre,
    SecondaryOre, Bar: TRSBankItem;
    SuperHeating: Boolean;
    CoalBag: TRSBankItem;
    ItemCount: Integer;
  end;

function GetOreQuantity(useCoalBag: Boolean; quantityWithoutBag, quantityWithBag: Integer): Integer;
begin
  if useCoalBag then Result := quantityWithBag
  else Result := quantityWithoutBag;
end;


procedure TSuperHeater.SetupItems();
begin
  Self.Spell := ERSSpell.SUPERHEAT_ITEM;
  NatureRune := TRSBankItem.Setup('Nature rune', -1);
  ItemCount := -1;
  if USE_COALBAG then CoalBag := TRSBankItem.Setup('Coal bag', 1);

  if CurrentTask = 'Bronze' then
  begin
    Bar := TRSBankItem.Setup('Bronze bar', -1);
    PrimaryOre := TRSBankItem.Setup('Tin ore', 13);
    SecondaryOre := TRSBankItem.Setup('Copper ore', 13);
  end
  else if CurrentTask = 'Iron' then
  begin
    Bar := TRSBankItem.Setup('Iron bar', -1);
    PrimaryOre := TRSBankItem.Setup('Iron ore', 27);
    SecondaryOre := TRSBankItem.Setup('', 0);  // No secondary ore
  end
  else if CurrentTask = 'Silver' then
  begin
    Bar := TRSBankItem.Setup('Silver bar', -1);
    PrimaryOre := TRSBankItem.Setup('Silver ore', 27);
    SecondaryOre := TRSBankItem.Setup('', 0);  // No secondary ore
  end
  else if CurrentTask = 'Steel' then
  begin
    Bar := TRSBankItem.Setup('Steel bar', -1);
    PrimaryOre := TRSBankItem.Setup('Iron ore', GetOreQuantity(USE_COALBAG, 9, 17));
    SecondaryOre := TRSBankItem.Setup('Coal', GetOreQuantity(USE_COALBAG, 18, -1));
  end
  else if CurrentTask = 'Gold' then
  begin
    Bar := TRSBankItem.Setup('Gold bar', -1);
    PrimaryOre := TRSBankItem.Setup('Gold ore', 27);
    SecondaryOre := TRSBankItem.Setup('', 0);  // No secondary ore
  end
  else if CurrentTask = 'Mithril' then
  begin
    Bar := TRSBankItem.Setup('Mithril bar', -1);
    PrimaryOre := TRSBankItem.Setup('Mithril ore', GetOreQuantity(USE_COALBAG, 5, 10));
    SecondaryOre := TRSBankItem.Setup('Coal', GetOreQuantity(USE_COALBAG, 20, -1));
  end
  else if CurrentTask = 'Adamantite' then
  begin
    Bar := TRSBankItem.Setup('Adamantite bar', -1);
    PrimaryOre := TRSBankItem.Setup('Adamantite ore', GetOreQuantity(USE_COALBAG, 3, 7));
    SecondaryOre := TRSBankItem.Setup('Coal', GetOreQuantity(USE_COALBAG, 18, -1));
  end
  else if CurrentTask = 'Runite' then
  begin
    Bar := TRSBankItem.Setup('Runite bar', -1);
    PrimaryOre := TRSBankItem.Setup('Runite ore', GetOreQuantity(USE_COALBAG, 3, 5));
    SecondaryOre := TRSBankItem.Setup('Coal', GetOreQuantity(USE_COALBAG, 24, -1));
  end
  else
  begin
    TerminateScript('Task not detected?');
  end;
end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.MAGIC, ERSSkill.TOTAL];
  Self.MinZoom := 15;
  Self.MaxZoom := 85;
  inherited;
end;

procedure TSuperHeater.Init(MaxActions: UInt32; MaxTime: UInt64); override;
begin
  inherited;
  Self.RSW.SetupNamedRegion();
  Self.SetupItems();
  WLSettings.Antiban.Enabled        := True;
  WLSettings.Breaks                 := True;
  WLSettings.Sleep.Enabled          := True;
  WLSettings.RemoteInput.Enabled    := True;
  WLSettings.RemoteInput.HUDReport  := False;
  if MOUSEOVERRIDE <> 0 then
    Mouse.Speed := MOUSEOVERRIDE;

  if Magic.Open and Magic.IsFiltered then WaitUntil(Magic.DisableFilters, 1000, 10000);

  if Options.GetBrightnessLevel < 100 then
  begin
    Options.SetMaxBrightness;
    WriteLn('Current brightness level: ' + IntToStr(Options.GetBrightnessLevel));
  end

  if RSClient.DetectClientMode() <> ERSClientMode.FIXED then
  begin
    WriteLn('The client must be running in FIXED mode. Please change the mode and restart the script.');
    TerminateScript();
  end;
end;

function TSuperHeater.CastSpell(): Boolean;
begin
  Result := False; // Default result
  if ItemCount <= 0 then Exit;

  XPBar.EarnedXP();

  // Exit early if unable to cast the spell or if the inventory doesn't open
  if not (Magic.CastSpell(Self.Spell) and WaitUntil(Inventory.IsOpen, MAGIC_OPEN_WAIT_MIN, MAGIC_OPEN_WAIT_MAX)) then Exit;
  // Special cases of antiban double-click
  if Magic.IsSelected(Self.Spell) and not Inventory.IsOpen then Magic.Deselect;
  // Exit early if unable to click on the primary ore item
  if not (Inventory.ClickItem(PrimaryOre.Item, '>') and WaitUntil(Magic.IsOpen(), MAGIC_OPEN_WAIT_MIN, MAGIC_OPEN_WAIT_MAX)) then Exit;

  // Check for XP gain and decrement ItemCount if successful
  if WaitUntil(XPBar.EarnedXP(), MAGIC_OPEN_WAIT_MIN, MAGIC_OPEN_WAIT_MAX) then
  begin
    Result := True;
    Dec(ItemCount);
  end;

  // Update SuperHeating status
  Self.SuperHeating := Result;

  // Handle case when out of items
  if ItemCount <= 0 then
    Self.SuperHeating := False;
end;

procedure TSuperHeater.WithdrawMaterial();
begin
  if not Inventory.ContainsItem(Self.NatureRune.Item) then
    Self.Withdraw(Self.NatureRune);

  if USE_COALBAG then
  begin
  if not Inventory.ContainsItem(Self.CoalBag.Item) then
    Self.Withdraw(Self.CoalBag);

  if Inventory.ContainsItem(Self.CoalBag.Item) then
  begin
    Waituntil(Inventory.ClickItem(Self.CoalBag.Item, 'Empty'), DEPOSIT_WAIT_MIN, DEPOSIT_WAIT_MAX);
    Waituntil(Inventory.ClickItem(Self.CoalBag.Item, 'Fill'), DEPOSIT_WAIT_MIN, DEPOSIT_WAIT_MAX);
  end
  end
  if SecondaryOre.Item <> '' then
  begin
    Self.Withdraw(Self.PrimaryOre);
    Self.Withdraw(Self.SecondaryOre);
  end
  else
  begin
    Self.Withdraw(Self.PrimaryOre);
  end;
end;

function TSuperHeater.HasRequiredItems(): Boolean;
begin
  Result := Inventory.ContainsItem(self.NatureRune.Item);

  if Result then
    Result := Inventory.ContainsItem(self.PrimaryOre.Item);

  if Result and (self.SecondaryOre.Item <> '') then
    Result := Inventory.ContainsItem(self.SecondaryOre.Item);
end;

procedure TSuperHeater.CollectRequiredItems();
begin
  Self.HandleCollectBox([self.NatureRune.Item]);
  Self.HandleCollectBox([self.PrimaryOre.Item]);

  if self.SecondaryOre.Item <> '' then
    Self.HandleCollectBox([self.SecondaryOre.Item]);
end;

function TSuperHeater.Deposit(): Boolean;
var
  itemCount: Int32 := Inventory.CountItem(Bar.Item);
begin
  if Result := bank.DepositItem(Bar, True) then
  begin
    if WaitUntil(Inventory.CountItem(Bar.Item) = 0, DEPOSIT_WAIT_MIN, DEPOSIT_WAIT_MAX) then
    begin
      Self.TotalActions += itemCount;
    end;
  end;
end;

function TSuperHeater.HandleActivity(): EState;
begin
  if WL.Activity.IsFinished() then
    Result := EState.END_SCRIPT
  else if Chat.LeveledUp() then
  begin
    Self.SuperHeating := False;
    Result := EState.LEVEL_UP;
  end
end;

function TSuperHeater.HandleBank(): EState;
begin
  if Inventory.ContainsItem(Self.Bar.Item) then
    Result := EState.DEPOSIT_PRODUCT
  else if BankEmpty or HasRequiredItems() then
    Result := EState.CLOSE_INTERFACE
  else if not HasRequiredItems() then
    Result := EState.WITHDRAW_MATERIAL
  else
    Result := EState.CLOSE_INTERFACE;
  ItemCount := Inventory.CountItem(PrimaryOre.Item);
end;

procedure TSuperHeater.CollectIfRequired();
begin
  if CollectBox.IsOpen() then
  begin
    if Self.CollectEmpty or HasRequiredItems() then
      MainScreen.CloseInterface()
    else
      Self.CollectRequiredItems();
  end;
end;

function TSuperHeater.HandleCollects(): EState;
begin
  if Self.CollectEmpty or HasRequiredItems() then
    Result := EState.CLOSE_INTERFACE
  else
    Result := EState.HANDLE_COLLECT;
end;

function TSuperHeater.GetState(): EState;
begin
  if WL.Activity.IsFinished() or Chat.LeveledUp() then
    Exit(HandleActivity());

  if MainScreen.HasInterface() then
  begin
    Self.SuperHeating := false;  // Reset the flag
    if Bank.IsOpen() then
      Exit(HandleBank());

    if CollectBox.IsOpen() then
      Exit(HandleCollects());

    Exit(EState.CLOSE_INTERFACE);
  end;

  if ItemCount <= 0 then
    Exit(EState.OPEN_BANK);

  Exit(EState.CAST_SPELL);
end;


function TSuperHeater.Terminate(): Boolean; override;
begin
  Self.Bar.Noted := True;
  if inherited then
    for 0 to 5 do
      if Result := Self.Withdraw(Self.Bar) then
        Break;
  SuperHeating
end;

procedure TSuperHeater.SafeBankOpen();
begin
  if Magic.IsSelected(Self.Spell) then
  begin
    Magic.Deselect();
  end;
  Bank.WalkOpen();
end;

procedure TSuperHeater.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);
  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(State));
    case State of
      EState.OPEN_BANK: self.SafeBankOpen();
      EState.WITHDRAW_MATERIAL: Self.WithdrawMaterial();
      EState.DEPOSIT_PRODUCT: Self.Deposit();
      EState.OPEN_COLLECT: CollectBox.WalkOpen();
      EState.HANDLE_COLLECT: Self.CollectRequiredItems();
      EState.CLOSE_INTERFACE: MainScreen.CloseInterface();
      EState.LEVEL_UP: Chat.HandleLevelUp();
      EState.CAST_SPELL: self.CastSpell();
      EState.END_SCRIPT: Break;
    end;
    Self.DoAntiban();
  until Self.ShouldStop();
  if not Self.Terminate() then
    TerminateScript(Self.Name + ' didn''t terminate properly. Stopping execution.');
end;

var
  SuperHeater: TSuperHeater;

type
  TSuperHeaterConfig = record(TScriptForm)
    BarSelector: TLabeledCombobox;
    CoalBagCheck: TCheckBox;
    Instructions: TLabel;
  end;

procedure TSuperHeaterConfig.StartScript(sender: TObject); override;
begin
  CurrentTask := Self.BarSelector.getText();
  USE_COALBAG := Self.CoalBagCheck.IsChecked();
  inherited;
end;

procedure TSuperHeaterConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('SuperHeater Config');
  Self.Start.SetOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];
  Self.CreateAccountManager(tab);

  with Self.BarSelector do
  begin
    Create(tab);
    SetCaption('Bar type:');
    SetLeft(TControl.AdjustToDPI(50));
    SetTop(TControl.AdjustToDPI(200));
    SetStyle(csDropDownList);
    AddItemArray(BAR_TYPE);
    SetItemIndex(1); // default to the first item
  end;

  with Self.CoalBagCheck do
  begin
    Create(tab);
    SetCaption('Use Coal bag');
    SetLeft(Self.BarSelector.GetRight() + TControl.AdjustToDPI(25));
    SetTop(Self.BarSelector.GetTop() + TControl.AdjustToDPI(20));
    SetChecked(USE_COALBAG);
    SetHint('Optional if using Steel, Mithril, Adamantite, Runite');
  end;

  with Self.Instructions do
  begin
    Create(tab);
    SetCaption('Instructions: Start with empty inventory and items visable in bank without scroll'
    + LINEENDING + 'Optionally use coal bag if using Steel, Mithril, Adamantite, Runite');
    SetLeft(Self.BarSelector.GetLeft() + TControl.AdjustToDPI(0));
    SetTop(Self.BarSelector.GetBottom() + TControl.AdjustToDPI(20));
  end;

  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateBankSettings();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;

var
  SuperHeaterConfig: TSuperHeaterConfig;

begin
  if USE_GUI then
    SuperHeaterConfig.Run();

  SuperHeater.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
